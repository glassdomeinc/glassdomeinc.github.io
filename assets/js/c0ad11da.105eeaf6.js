"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5052],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,b=p["".concat(s,".").concat(f)]||p[f]||u[f]||i;return n?o.createElement(b,a(a({ref:t},d),{},{components:n})):o.createElement(b,a({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(7462),r=(n(7294),n(4137));const i={slug:"cdktf-cloudfront-cloudflare",title:"Deploying an S3 static website with CDK for Terraform on Cloudfront vs Cloudflare",authors:"adil",tags:["cdktf","terraform","cloudfront","cloudflare","s3","static","website"]},a=void 0,l={permalink:"/blog/cdktf-cloudfront-cloudflare",source:"@site/blog/2022-11-08-cdktf-cloudfront-cloudflare-eng.md",title:"Deploying an S3 static website with CDK for Terraform on Cloudfront vs Cloudflare",description:"This tutorial shows what I did to setup and deploy an example static website on Cloudflare and Amazon Cloudfront using Terraform (CDK, Typescript)",date:"2022-11-08T00:00:00.000Z",formattedDate:"2022\ub144 11\uc6d4 8\uc77c",tags:[{label:"cdktf",permalink:"/blog/tags/cdktf"},{label:"terraform",permalink:"/blog/tags/terraform"},{label:"cloudfront",permalink:"/blog/tags/cloudfront"},{label:"cloudflare",permalink:"/blog/tags/cloudflare"},{label:"s3",permalink:"/blog/tags/s-3"},{label:"static",permalink:"/blog/tags/static"},{label:"website",permalink:"/blog/tags/website"}],readingTime:6.7,hasTruncateMarker:!0,authors:[{name:"Adil",title:"Software Engineer",url:"https://github.com/adilb99",imageURL:"https://avatars.githubusercontent.com/u/47117931?v=4",key:"adil"}],frontMatter:{slug:"cdktf-cloudfront-cloudflare",title:"Deploying an S3 static website with CDK for Terraform on Cloudfront vs Cloudflare",authors:"adil",tags:["cdktf","terraform","cloudfront","cloudflare","s3","static","website"]},nextItem:{title:"Installing Clickhouse on Kubernetes Hosted by NCloud and NHN Cloud",permalink:"/blog/clickhouse"}},s={authorsImageUrls:[void 0]},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initializing the project and folder structure",id:"initializing-the-project-and-folder-structure",level:2},{value:"Boilerplate code to start with",id:"boilerplate-code-to-start-with",level:2},{value:"Let&#39;s now create our main -- index.ts in the root folder, from which the Terraform app can run:",id:"lets-now-create-our-main----indexts-in-the-root-folder-from-which-the-terraform-app-can-run",level:3},{value:"And then the index.ts in &#39;lib&#39; where we define our Terraform Stack:",id:"and-then-the-indexts-in-lib-where-we-define-our-terraform-stack",level:3},{value:"Using Cloudflare",id:"using-cloudflare",level:2},{value:"Additional prerequisites",id:"additional-prerequisites",level:3},{value:"Getting an API Token",id:"getting-an-api-token",level:3},{value:"Setting up S3 bucket hosting",id:"setting-up-s3-bucket-hosting",level:3},{value:"Uploading static website files to S3 as S3 Objects",id:"uploading-static-website-files-to-s3-as-s3-objects",level:3},{value:"Adding Cloudflare CDN Records",id:"adding-cloudflare-cdn-records",level:3},{value:"Using Amazon CloudFront",id:"using-amazon-cloudfront",level:2},{value:"Setting up an S3 Bucket",id:"setting-up-an-s3-bucket",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This tutorial shows what I did to setup and deploy an example static website on Cloudflare and Amazon Cloudfront using Terraform (CDK, Typescript)"),(0,r.kt)("p",null,"Cloudflare and Cloudfront are similar CDN, DNS and load balancing providers that can help host your API or website and make it more available. Despite their similarity, setting them up with an S3 Hosted static website is obviously different."),(0,r.kt)("p",null,"In this tutorial, I'll give some code snippets and pointers on how to set up the bare working minimum for each. The rest like more secure S3 Policies, hosting directly on Cloudflare or using an on-premise hosted website instead of an S3 Bucket will be up to the reader."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Make sure to have cdktf, terraform, node, npm, react installed on your system."),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"initializing-the-project-and-folder-structure"},"Initializing the project and folder structure"),(0,r.kt)("p",null,"Folder structure is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cloudflare-example\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 index.ts\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 backend.ts\n\u2502   \u251c\u2500\u2500 provider.ts\n\u2502   \u251c\u2500\u2500 test\n\u2502   \u2502   \u251c\u2500\u2500 cloudflare-test.ts\n\u2502   \u2502   \u251c\u2500\u2500 cloudfront-test.ts\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 web\n\u2502       \u251c\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 build\n\u2502       \u251c\u2500\u2500 node_modules\n\u2502       \u251c\u2500\u2500 package-lock.json\n\u2502       \u251c\u2500\u2500 package.json\n\u2502       \u251c\u2500\u2500 public\n\u2502       \u2514\u2500\u2500 src\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 jest.config.js\n\u2514\u2500\u2500 tsconfig.json\n")),(0,r.kt)("p",null,"'web' folder can be initialized using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cd lib\n$ npm i -g create-react-app\n$ create-react-app web\n$ cd web\n$ npm run build\n")),(0,r.kt)("p",null,"The root folder can be initialized with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cdktf init\n")),(0,r.kt)("p",null,"The rest needs to be created."),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"boilerplate-code-to-start-with"},"Boilerplate code to start with"),(0,r.kt)("p",null,"First, get provider dependencies by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cdktf get\n")),(0,r.kt)("p",null,"The dependencies will be store in the directory '.gen' under root folder of the project."),(0,r.kt)("h3",{id:"lets-now-create-our-main----indexts-in-the-root-folder-from-which-the-terraform-app-can-run"},"Let's now create our main -- index.ts in the root folder, from which the Terraform app can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"import * as dotenv from 'dotenv'\nimport { App } from 'cdktf'\nimport { TestStack } from './lib/test'\n\ndotenv.config()\n\nconst app = new App()\n\nnew TestStack(app, 'test')\n\napp.synth()\n")),(0,r.kt)("h3",{id:"and-then-the-indexts-in-lib-where-we-define-our-terraform-stack"},"And then the index.ts in 'lib' where we define our Terraform Stack:"),(0,r.kt)("p",null,"First, the dependencies are as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/index.ts"',title:'"/lib/index.ts"'},"import { TerraformStack } from 'cdktf'\nimport { Construct } from 'constructs'\nimport { MyBackend } from '../backend'\nimport { MyProvider } from '../provider'\nimport { CloudflareTest } from './cloudflare-test'\nimport { CloudfrontTest } from './cloudfront-test'\nimport { CloudflareProvider } from '../../.gen/providers/cloudflare/provider'\n\nexport interface TestStackProps {\n  region?: string\n}\n")),(0,r.kt)("p",null,"We define several providers (this can also be done in providers.ts) because we use AWS S3 to host our files and Cloudflare as a standalone provider for DNS and CDN:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/index.ts"',title:'"/lib/index.ts"'},"export class TestStack extends TerraformStack {\n  constructor(scope: Construct, id: string, props?: TestStackProps) {\n    super(scope, id)\n\n    // defining providers\n    new AwsProvider(this, 'provider', {\n      profile: process.env.AWS_PROFILE,\n      region: props?.region,\n    })\n    new CloudflareProvider(this, 'cloudflare-provider', {\n      apiToken: '<YOUR_API_TOKEN>',\n    })\n\n    // enabling backend\n    MyBackend.of(this, id)\n\n    // ---\n\n    const acmCertificateArn = '<YOUR ACM CERTIFICATE ARN>'\n\n    new CloudfrontTest(this, 'adil-s3-test', {\n      domain: '<YOUR PURCHASED DOMAIN NAME>',\n      hostedZoneId: '<YOUR HOSTED ZONE ID>',\n      acmCertificateArn,\n    })\n\n    new CloudflareTest(this, 'cloudflare-test', {\n      domain: '<YOUR PURCHASED DOMAIN NAME>',\n    })\n  }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To get some of the credentials and other values like \\<YOUR_API_TOKEN",">",", refer to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Using Cloudflare")," section down below")),(0,r.kt)("h2",{id:"using-cloudflare"},"Using Cloudflare"),(0,r.kt)("h3",{id:"additional-prerequisites"},"Additional prerequisites"),(0,r.kt)("p",null,"Make sure you have purchased a domain name that you can use to set up a Cloudflare site."),(0,r.kt)("h3",{id:"getting-an-api-token"},"Getting an API Token"),(0,r.kt)("p",null,"Go to Cloudflare Dashboard and click 'My Profile' on the top right corner of the page."),(0,r.kt)("p",null,"Then, go to API Tokens and click 'Create Token'."),(0,r.kt)("p",null,"Create a custom API Token with the following rules:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://content.hashicorp.com/api/assets?product=tutorials&version=main&asset=public%2Fimg%2Fterraform%2Fuse-cases%2Fcloudflare-static-website%2Fcustom-api-token-settings.png",alt:"Image"})),(0,r.kt)("p",null,"You can then use that token for CloudflareProvider initialization in the code snippet above"),(0,r.kt)("h3",{id:"setting-up-s3-bucket-hosting"},"Setting up S3 bucket hosting"),(0,r.kt)("p",null,"Here we have to make sure our bucket is reachable, thus we set its ACL rule as 'public-read' and security policy to allow PublicReadGetObject as in the code snippet below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudflare-test.ts"',title:'"/lib/cloudflare-test.ts"'},'const s3_bucket = new S3Bucket(this, \'s3-bucket\', {\n  bucket: props.domain,\n})\n\nnew S3BucketAcl(this, \'s3-bucket-acl\', {\n  bucket: s3_bucket.bucket,\n  acl: \'public-read\',\n})\n\nnew S3BucketPolicy(this, \'s3-bucket-policy\', {\n  bucket: s3_bucket.bucket,\n  policy: `{\n        "Version": "2012-10-17",\n        "Statement": [\n          {\n            "Sid": "PublicReadGetObject",\n            "Effect": "Allow",\n            "Principal": "*",\n            "Action": [\n              "s3:GetObject"\n            ],\n            "Resource": [\n              "arn:aws:s3:::${props.domain}/*"\n            ]\n          }\n        ]\n      }`,\n})\n\n// Static Website Hosting\nconst website_\u0441onfiguration = new S3BucketWebsiteConfiguration(this, \'s3-website-configuration\', {\n  bucket: s3_bucket.bucket,\n  indexDocument: { suffix: \'index.html\' },\n  errorDocument: { key: \'index.html\' },\n})\n')),(0,r.kt)("p",null,"Then, we enable website hosting. Note, in older versions of hashicorp/aws provider all of these configurations can be done using just the 'S3Bucket' object. In the latest versions, ACL, policy and other settings for the bucket have to be defined separately."),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"uploading-static-website-files-to-s3-as-s3-objects"},"Uploading static website files to S3 as S3 Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudflare-test.ts"',title:'"/lib/cloudflare-test.ts"'},"// Get all the files from build folder, skip directories\nconst files = glob.sync('./lib/web/build/**/*', { absolute: false, nodir: true })\n\n// Create bucket object for each file\nfor (const file of files) {\n  new S3Object(this, `aws_s3_bucket_object_${path.basename(file)}`, {\n    dependsOn: [s3_bucket], // Wait untill the bucket is not created\n    key: file.replace(`./lib/web/build/`, ''), // Using relative path for folder structure on S3\n    bucket: props.domain,\n    source: path.resolve(file), // Using absolute path to upload\n    etag: `${Date.now()}`,\n    contentType: mime.contentType(path.extname(file)) || undefined, // Set the content-type for each object\n  })\n}\n")),(0,r.kt)("p",null,"*","Note: Here a dependsOn parameter is used to wait for the bucket to be created before starting upload. Also, make sure to change the Terraform name of each S3Object accordingly."),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"adding-cloudflare-cdn-records"},"Adding Cloudflare CDN Records"),(0,r.kt)("p",null,"Then, we add a CNAME record to Cloudflare pointing to that S3 Bucket URL that is now publicly available (and www just in case):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudflare-test.ts"',title:'"/lib/cloudflare-test.ts"'},"new CloudflareRecord(this, 'cloudflare-record-naked', {\n  zoneId: '2cdf31b7a1cd506ef0307f912181bfdc',\n  name: props.domain,\n  value: website_\u0441onfiguration.websiteEndpoint,\n  type: 'CNAME',\n  ttl: 1,\n  proxied: true,\n})\n\nnew CloudflareRecord(this, 'cloudflare-record-www', {\n  zoneId: '2cdf31b7a1cd506ef0307f912181bfdc',\n  name: 'www',\n  value: props.domain,\n  type: 'CNAME',\n  ttl: 1,\n  proxied: true,\n})\n")),(0,r.kt)("p",null,"That's it. After running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cdktf deploy\n")),(0,r.kt)("p",null,"The static website should now be available via your purchased domain"),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"using-amazon-cloudfront"},"Using Amazon CloudFront"),(0,r.kt)("h3",{id:"setting-up-an-s3-bucket"},"Setting up an S3 Bucket"),(0,r.kt)("br",null),(0,r.kt)("p",null,"Before we configure the bucket, we need Cloudfront Origin Access Identity to then use that in our bucket's IAM policy configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudfront-test.ts"',title:'"/lib/cloudfront-test.ts"'},"const cloudfront_origin_access_identity = new CloudfrontOriginAccessIdentity(\n  this,\n  'cloudfront-origin-access-identity',\n  { comment: props.domain }\n)\n")),(0,r.kt)("p",null,"This time the bucket can be made private and without website configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudfront-test.ts"',title:'"/lib/cloudfront-test.ts"'},'const s3_bucket = new S3Bucket(this, \'s3-bucket\', {\n  bucket: props.domain,\n})\n\nnew S3BucketAcl(this, \'s3-bucket-acl\', {\n  bucket: s3_bucket.bucket,\n  acl: \'private\',\n})\n\nnew S3BucketPolicy(this, \'s3-bucket-policy\', {\n  bucket: s3_bucket.bucket,\n  policy: `{\n        "Version": "2012-10-17",\n        "Statement": [\n          {\n            "Sid": "PublicReadGetObject",\n            "Effect": "Allow",\n            "Principal": {\n              "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cloudfront_origin_access_identity.id}"\n            },\n            "Action": [\n              "s3:GetObject"\n            ],\n            "Resource": [\n              "arn:aws:s3:::${props.domain}/*"\n            ]\n          }\n        ]\n      }`,\n})\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Then, we add objects to the bucket in the same manner as with Cloudflare"),(0,r.kt)("p",null,"After which, the Cloudfront distribution is configured as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudfront-test.ts"',title:'"/lib/cloudfront-test.ts"'},"const cloudfront_distribution = new CloudfrontDistribution(this, `aws_cloudfront_${props.domain}`, {\n  enabled: true,\n  dependsOn: [s3_bucket],\n  defaultRootObject: 'index.html',\n  aliases: [props.domain],\n  customErrorResponse: [\n    {\n      errorCode: 404,\n      responseCode: 200,\n      responsePagePath: '/index.html',\n    },\n  ],\n  origin: [\n    {\n      originId: originId,\n      domainName: s3_bucket.bucketDomainName,\n      s3OriginConfig: {\n        originAccessIdentity: cloudfront_origin_access_identity.cloudfrontAccessIdentityPath,\n      },\n    },\n  ],\n  defaultCacheBehavior: {\n    allowedMethods: ['GET', 'HEAD'],\n    cachedMethods: ['GET', 'HEAD'],\n    forwardedValues: {\n      cookies: { forward: 'none' },\n      queryString: false,\n    },\n    targetOriginId: originId,\n    viewerProtocolPolicy: 'allow-all',\n  },\n  restrictions: {\n    geoRestriction: {\n      restrictionType: 'none',\n    },\n  },\n  viewerCertificate: {\n    // *.glassdome.cloud \uc778\uc99d\uc11c\n    acmCertificateArn: props.acmCertificateArn,\n    minimumProtocolVersion: 'TLSv1.2_2021',\n    sslSupportMethod: 'sni-only',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Note: It's important to add 'aliases' field for your domain to work.")),(0,r.kt)("br",null),(0,r.kt)("p",null,"After that, we need to create an A Record in Route 53 as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/lib/cloudfront-test.ts"',title:'"/lib/cloudfront-test.ts"'},"new Route53Record(this, 'route53-record', {\n  zoneId: props.hostedZoneId,\n  type: 'A',\n  name: props.domain,\n  alias: [\n    {\n      name: cloudfront_distribution.domainName,\n      zoneId: cloudfront_distribution.hostedZoneId,\n      evaluateTargetHealth: false,\n    },\n  ],\n})\n")),(0,r.kt)("p",null,"This will ensure the domain name works and points to the correct content."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"As you might have noticed, the Cloudfront is slightly easier to set-up safely without exposing S3 Bucket URL to the public. However, Cloudflare might offer other additional safety and performance benefits after careful set up. For this tutorial, we only focused on the bare working minimum, so that'll do for now."),(0,r.kt)("p",null,"Thank you for reading."))}u.isMDXComponent=!0}}]);